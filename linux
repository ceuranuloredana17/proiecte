#!/bin/bash

read -p "Adaugati calea unui fisier CSV: (./calea/catre/CSV/fisier.csv) " path

if [ -s "$path" ]; then
    echo "Fisierul exista - se va actualiza"
else
    echo "Fisierul nu exista sau este gol"
    echo "Cream fisierul"
    touch "$path"
    echo "ID,Nume,Prenume,Data,Ora" >> "$path"
fi

while true; do
    echo "Selectati optiunea dorita?"
    echo "1. Adauga inregistrare noua"
    echo "2. Sterge inregistrare"
    echo "3. Extrage rezultate in functie de un interval orar"
    echo "4. Extrage rezultate in functie de o data"
    echo "5. Sorteaza dupa data si ora"
    echo "6. Afiseaza primele 3 programari intr-o anume zi"
    echo "7. Actualizare ID"
    echo "8. Iesire"
    read -p "Alegeti comanda [1-8]: " choice
    echo "-----------------------------------------"
    case $choice in
        1)
            id=$(awk -F, '{print $1}' "$path" | tail -n 1)
            if [[ -z "$id" ]]; then
                id=0
            fi
            id=$((id+1))
            read -p "Introdu nume " nume
            read -p "Introdu Prenume: " prenume
            read -p "Introdu data[YYYY-MM-DD]: " data
            while [[ ! "$data" =~ ^[0-9]{4}-[0-9]{2}-[0-9]{2}$ ]]; do
                read -p "Va rugam sa introduceti un format corect[YYYY-MM-DD]: " data
            done
            read -p "Introdu ora[HH:MM]: " ora
            while [[ ! "$ora" =~ ^[0-9]{2}:[0-9]{2}$ ]]; do
                read -p "Va rugam sa introduceti o ora valid [HH:MM]" ora
            done
           
            if [[ $(awk -F, -v data="$data" -v ora="$ora" '$4 == data && $5 == ora' "$path") ]]; then
                echo "Data si ora exista deja"
                echo "-----------------------------------------"
                continue
            fi
 
            echo "$id,$nume,$prenume,$data,$ora" >> "$path"

            ;;
        2)
            read -p "Introdu ID-ul inregistrarii pe care vrei sa il stergi: " id
            if [[ $(awk -F, '{print $1}' "$path" | grep -w "$id") ]]; then
                sed -i "/^$id,/d" "$path"
                awk -F, -v id="$id" '$1 > id {$1=$1-1}1' OFS=, "$path" > temp && mv temp "$path"
                sed -i "1s/.*/ID,Nume,Prenume,Data,Ora/" "$path"
            else
                echo "ID-ul nu exista"
            fi

            ;;
        3)
            read -p "Introdu ora de inceput[HH:MM]: " ora1

            while [[ ! "$ora1" =~ ^[0-9]{2}:[0-9]{2}$ ]]; do
                read -p "Va rugam sa introduceti un format corect[HH:MM]: " ora1
            done
            read -p "Introdu ora de sfarsit[HH:MM]: " ora2

            while [[ ! "$ora2" =~ ^[0-9]{2}:[0-9]{2}$ ]]; do
                read -p "Va rugam sa introduceti un format corect[HH:MM]: " ora2
            done

            IFS=":" read -r ora1_i min1_i <<< "$ora1"
            IFS=":" read -r ora2_i min2_i <<< "$ora2"
            ora1_i=${ora1_i#0}
            ora2_i=${ora2_i#0}
            min1_i=${min1_i#0}
            min2_i=${min2_i#0}

            if [[ "$ora1_i" -gt "$ora2_i" || ( "$ora1_i" -eq "$ora2_i" && "$min1_i" -gt "$min2_i" ) ]]; then
                echo "Ora de inceput trebuie sa fie mai mica decat ora de sfarsit"
                echo "-----------------------------------------"
                continue
            fi

            ar1=() ar2=() ar3=() ar4=() ar5=()

            while IFS=',' read -ra array; do
                ar1+=("${array[0]}")
                ar2+=("${array[1]}")
                ar3+=("${array[2]}")
                ar4+=("${array[3]}")
                ar5+=("${array[4]}")
            done < "$path"

            for i in "${!ar5[@]}"; do
                if [[ "$i" -eq 0 ]]; then
                    continue
                fi
                IFS=":" read -r ora_i min_i <<< "${ar5[$i]}"
                ora_i=${ora_i#0}
                min_i=${min_i#0}
                if [[("$ora_i" -eq "$ora1_i" && "$ora_i" -eq "$ora2_i" && "$min_i" -ge "$min1_i" && "$min_i" -le "$min2_i") || ( "$ora_i" -gt "$ora1_i" && "$ora_i" -lt "$ora2_i" ) || ( "$ora_i" -eq "$ora1_i" && "$ora1_i" -ne "$ora2_i" && "$min_i" -ge "$min1_i" ) || ( "$ora_i" -eq "$ora2_i" && "$ora1_i" -ne "$ora2_i"  && "$min_i" -le "$min2_i" ) 
                    ]]; then
                    echo "${ar2[$i]} ${ar3[$i]} ${ar4[$i]} ${ar5[$i]}"
                fi
            done
            
            ;;
        4)
            read -p "Introdu data [YYYY-MM-DD]: " data
            while [[ ! "$data" =~ ^[0-9]{4}-[0-9]{2}-[0-9]{2}$ ]]; do
                read -p "Va rugam sa introduceti un format corect[YYYY-MM-DD]: " data
            done

            if [[ -z $(awk -F, -v data="$data" '$4 == data {print $2,$3,$4,$5}' "$path") ]]; then
                echo "Nu exista inregistrari"
            else
                awk -F, -v data="$data" '$4 == data {print $2,$3,$4,$5}' "$path"
            fi

            ;;
        5)
            ar1=() ar2=() ar3=() ar4=() ar5=()
            while IFS=',' read -ra array; do
                ar1+=("${array[0]}")
                ar2+=("${array[1]}")
                ar3+=("${array[2]}")
                ar4+=("${array[3]}")
                ar5+=("${array[4]}")
            done < "$path"
            for ((i=1; i<${#ar1[@]}; i++)); do
                for ((j=i+1; j<${#ar1[@]}; j++)); do
                    if [[ "${ar4[$i]}" > "${ar4[$j]}" ]]; then
                        temp2="${ar2[$i]}"
                        temp3="${ar3[$i]}"
                        temp4="${ar4[$i]}"
                        temp5="${ar5[$i]}"
                        ar2[$i]="${ar2[$j]}"
                        ar3[$i]="${ar3[$j]}"
                        ar4[$i]="${ar4[$j]}"
                        ar5[$i]="${ar5[$j]}"
                        ar2[$j]="$temp2"
                        ar3[$j]="$temp3"
                        ar4[$j]="$temp4"
                        ar5[$j]="$temp5"
                    elif [[ "${ar4[$i]}" = "${ar4[$j]}" && "${ar5[$i]}" > "${ar5[$j]}" ]]; then
                        temp2="${ar2[$i]}"
                        temp3="${ar3[$i]}"
                        temp4="${ar4[$i]}"
                        temp5="${ar5[$i]}"
                        ar2[$i]="${ar2[$j]}"
                        ar3[$i]="${ar3[$j]}"
                        ar4[$i]="${ar4[$j]}"
                        ar5[$i]="${ar5[$j]}"
                        ar2[$j]="$temp2"
                        ar3[$j]="$temp3"
                        ar4[$j]="$temp4"
                        ar5[$j]="$temp5"
                    fi
                done
            done
            echo "Id,Nume,Prenume,Data,Ora" > "$path"
            for i in "${!ar1[@]}"; do
                if [[ "$i" -eq 0 ]]; then
                    continue
                fi
                echo "${ar1[$i]},${ar2[$i]},${ar3[$i]},${ar4[$i]},${ar5[$i]}" >> "$path"
            done
            ;;
        6)
            ar1=() ar2=() ar3=() ar4=() ar5=()
            while IFS=',' read -ra array; do
                ar1+=("${array[0]}")
                ar2+=("${array[1]}")
                ar3+=("${array[2]}")
                ar4+=("${array[3]}")
                ar5+=("${array[4]}")
            done < "$path"
            for ((i=1; i<${#ar1[@]}; i++)); do
                for ((j=i+1; j<${#ar1[@]}; j++)); do
                    if [[ "${ar4[$i]}" > "${ar4[$j]}" ]]; then
                        temp2="${ar2[$i]}"
                        temp3="${ar3[$i]}"
                        temp4="${ar4[$i]}"
                        temp5="${ar5[$i]}"
                        ar2[$i]="${ar2[$j]}"
                        ar3[$i]="${ar3[$j]}"
                        ar4[$i]="${ar4[$j]}"
                        ar5[$i]="${ar5[$j]}"
                        ar2[$j]="$temp2"
                        ar3[$j]="$temp3"
                        ar4[$j]="$temp4"
                        ar5[$j]="$temp5"
                    elif [[ "${ar4[$i]}" = "${ar4[$j]}" && "${ar5[$i]}" > "${ar5[$j]}" ]]; then
                        temp2="${ar2[$i]}"
                        temp3="${ar3[$i]}"
                        temp4="${ar4[$i]}"
                        temp5="${ar5[$i]}"
                        ar2[$i]="${ar2[$j]}"
                        ar3[$i]="${ar3[$j]}"
                        ar4[$i]="${ar4[$j]}"
                        ar5[$i]="${ar5[$j]}"
                        ar2[$j]="$temp2"
                        ar3[$j]="$temp3"
                        ar4[$j]="$temp4"
                        ar5[$j]="$temp5"
                    fi
                done
            done
            read -p "Introdu data: " data
            while [[ ! "$data" =~ ^[0-9]{4}-[0-9]{2}-[0-9]{2}$ ]]; do
                read -p "Va rugam sa introduceti un format corect[YYYY-MM-DD]: " data
            done
            for i in "${!ar1[@]}"; do
                if [[ "${ar4[$i]}" = "$data" ]]; then
                    echo "${ar1[$i]},${ar2[$i]},${ar3[$i]},${ar4[$i]},${ar5[$i]}"
                fi
            done | head -n 3
            ;;
        7)
            read -p "Introdu ID: " id
            read -p "Introdu nume: " nume
            read -p "Introdu prenume: " prenume
            read -p "Introdu data[YYYY-MM-DD]: " data
            while [[ ! "$data" =~ ^[0-9]{4}-[0-9]{2}-[0-9]{2}$ ]]; do
                read -p "Va rugam sa introduceti un format corect[YYYY-MM-DD]: " data
            done
            read -p "Introdu ora[HH:MM]: " ora
            while [[ ! "$ora" =~ ^[0-9]{2}:[0-9]{2}$ ]]; do
                read -p "Va rugam sa introduceti un format corect[HH:MM]: " ora
            done
            if [[ ! $(awk -F, '{print $1}' "$path" | grep -w "$id") ]]; then
                echo "Id-ul nu exista"
            else
                if [[ $(awk -F, -v data="$data" -v ora="$ora" '$4 == data && $5 == ora' "$path") ]]; then
                    echo "Data si ora exista deja"
                    echo "-----------------------------------------"
                    continue
                else
                    sed -i "s/^$id,.*$/$id,$nume,$prenume,$data,$ora/" "$path"
                fi
            fi
            ;;
        8)
            exit 0
            ;;
        *)
            echo "Optiune invalida"
            ;;
    esac
    echo "-----------------------------------------"
done
